// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: scanner.flex

import Symbol.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int SPECIAL_CHARACTERS = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\2\0\1\6\1\7\1\10\2\6\1\11"+
    "\1\12\1\6\1\13\1\14\1\15\1\16\11\17\1\0"+
    "\1\6\1\4\1\20\1\4\2\0\1\21\3\22\1\23"+
    "\1\22\21\24\1\25\2\24\1\6\1\26\2\6\1\27"+
    "\1\0\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\24\1\41\1\42\1\24\1\43\1\44"+
    "\1\45\1\24\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\25\1\54\1\24\1\6\1\55\1\6\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\5\3\2\5\17\6"+
    "\1\3\1\7\1\10\1\1\1\11\1\0\1\2\1\12"+
    "\1\0\1\13\7\6\1\14\14\6\1\15\2\0\2\12"+
    "\1\0\2\16\20\6\1\0\1\2\23\6\1\14\6\6"+
    "\1\14\26\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\212\0\270\0\346\0\212"+
    "\0\212\0\u0114\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228"+
    "\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398"+
    "\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508"+
    "\0\212\0\u0536\0\212\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c"+
    "\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e\0\u0256"+
    "\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce"+
    "\0\u08fc\0\u092a\0\u0958\0\u0986\0\212\0\u09b4\0\u09e2\0\u0a10"+
    "\0\u0a3e\0\u0a6c\0\212\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52"+
    "\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2"+
    "\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u09b4\0\u0dd6\0\u0e04"+
    "\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74"+
    "\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4"+
    "\0\u1112\0\u0fd0\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226"+
    "\0\u11ca\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368"+
    "\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8"+
    "\0\u1506\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\212";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\7\1\13\1\14\1\11\1\15\1\16\1\17\1\7"+
    "\1\20\4\21\2\4\1\21\1\22\1\23\1\21\1\24"+
    "\1\25\2\21\1\26\1\21\1\27\1\30\1\21\1\31"+
    "\1\32\1\33\1\34\1\21\1\35\1\36\1\21\1\37"+
    "\2\40\2\4\1\40\1\41\20\40\1\42\27\40\56\43"+
    "\60\0\1\5\73\0\1\11\44\0\1\11\60\0\1\11"+
    "\5\0\1\11\50\0\1\11\4\0\1\11\46\0\1\44"+
    "\3\0\1\45\2\0\1\11\51\0\1\46\6\0\1\47"+
    "\1\0\1\50\6\0\1\47\35\0\1\46\1\0\2\17"+
    "\3\0\1\47\10\0\1\47\37\0\2\51\1\0\5\21"+
    "\1\0\1\51\16\21\1\52\6\21\17\0\2\51\1\0"+
    "\5\21\1\0\1\51\25\21\17\0\2\51\1\0\5\21"+
    "\1\0\1\51\14\21\1\53\1\21\1\54\6\21\17\0"+
    "\2\51\1\0\5\21\1\0\1\51\12\21\1\55\1\21"+
    "\1\56\10\21\17\0\2\51\1\0\5\21\1\0\1\51"+
    "\12\21\1\57\12\21\17\0\2\51\1\0\5\21\1\0"+
    "\1\51\10\21\1\60\3\21\1\61\10\21\17\0\2\51"+
    "\1\0\5\21\1\0\1\51\5\21\1\60\5\21\1\62"+
    "\11\21\17\0\2\51\1\0\5\21\1\0\1\51\4\21"+
    "\1\63\7\21\1\64\10\21\17\0\2\51\1\0\5\21"+
    "\1\0\1\51\4\21\1\65\20\21\17\0\2\51\1\0"+
    "\5\21\1\0\1\51\14\21\1\53\1\21\1\66\6\21"+
    "\17\0\2\51\1\0\5\21\1\0\1\51\4\21\1\67"+
    "\7\21\1\70\10\21\17\0\2\51\1\0\5\21\1\0"+
    "\1\51\20\21\1\71\4\21\17\0\2\51\1\0\5\21"+
    "\1\0\1\51\7\21\1\72\15\21\17\0\2\51\1\0"+
    "\5\21\1\0\1\51\14\21\1\73\10\21\17\0\2\51"+
    "\1\0\5\21\1\0\1\51\7\21\1\74\15\21\56\0"+
    "\1\11\2\40\2\0\1\40\1\0\20\40\1\0\27\40"+
    "\5\0\1\75\2\0\1\75\15\0\1\75\14\0\1\75"+
    "\2\0\1\75\1\0\1\75\5\0\11\76\1\77\44\76"+
    "\2\45\1\5\1\6\52\45\16\0\1\100\1\101\3\0"+
    "\1\47\10\0\1\47\33\0\2\102\2\0\1\103\1\104"+
    "\54\0\2\50\1\0\3\50\4\0\6\50\36\0\2\105"+
    "\1\0\5\105\1\0\26\105\17\0\2\51\1\0\5\21"+
    "\1\0\1\51\16\21\1\106\6\21\17\0\2\51\1\0"+
    "\5\21\1\0\1\51\14\21\1\107\10\21\17\0\2\51"+
    "\1\0\5\21\1\0\1\51\4\21\1\110\20\21\17\0"+
    "\2\51\1\0\5\21\1\0\1\51\1\111\24\21\17\0"+
    "\2\51\1\0\5\21\1\0\1\51\13\21\1\112\11\21"+
    "\17\0\2\51\1\0\5\21\1\0\1\51\17\21\1\113"+
    "\5\21\17\0\2\51\1\0\5\21\1\0\1\51\16\21"+
    "\1\60\6\21\17\0\2\51\1\0\5\21\1\0\1\114"+
    "\20\21\1\60\4\21\17\0\2\51\1\0\5\21\1\0"+
    "\1\51\13\21\1\60\4\21\1\60\4\21\17\0\2\51"+
    "\1\0\5\21\1\0\1\51\14\21\1\115\10\21\17\0"+
    "\2\51\1\0\5\21\1\0\1\51\23\21\1\60\1\21"+
    "\17\0\2\51\1\0\5\21\1\0\1\51\10\21\1\116"+
    "\14\21\17\0\2\51\1\0\5\21\1\0\1\51\1\107"+
    "\17\21\1\117\4\21\17\0\2\51\1\0\5\21\1\0"+
    "\1\51\5\21\1\60\17\21\17\0\2\51\1\0\5\21"+
    "\1\0\1\51\1\120\15\21\1\121\6\21\17\0\2\51"+
    "\1\0\5\21\1\0\1\51\4\21\1\122\20\21\17\0"+
    "\2\51\1\0\5\21\1\0\1\51\10\21\1\123\14\21"+
    "\17\0\2\51\1\0\5\21\1\0\1\51\10\21\1\124"+
    "\14\21\1\0\11\76\1\125\55\76\1\125\3\76\1\126"+
    "\40\76\23\0\1\47\10\0\1\47\37\0\2\101\3\0"+
    "\1\47\10\0\1\47\37\0\1\103\1\104\54\0\2\104"+
    "\54\0\2\127\1\0\5\127\1\0\26\127\17\0\2\51"+
    "\1\0\5\21\1\0\1\51\1\130\24\21\17\0\2\51"+
    "\1\0\5\21\1\0\1\51\12\21\1\60\12\21\17\0"+
    "\2\51\1\0\5\21\1\0\1\51\1\131\24\21\17\0"+
    "\2\51\1\0\5\21\1\0\1\51\17\21\1\132\5\21"+
    "\17\0\2\51\1\0\5\21\1\0\1\51\20\21\1\133"+
    "\4\21\17\0\2\51\1\0\5\21\1\0\1\51\4\21"+
    "\1\60\20\21\17\0\2\105\1\0\5\105\1\0\11\105"+
    "\1\134\6\105\1\135\5\105\17\0\2\51\1\0\5\21"+
    "\1\0\1\51\15\21\1\60\7\21\17\0\2\51\1\0"+
    "\5\21\1\0\1\51\13\21\1\136\11\21\17\0\2\51"+
    "\1\0\5\21\1\0\1\51\21\21\1\137\3\21\17\0"+
    "\2\51\1\0\5\21\1\0\1\51\20\21\1\140\4\21"+
    "\17\0\2\51\1\0\5\21\1\0\1\51\10\21\1\141"+
    "\14\21\17\0\2\51\1\0\5\21\1\0\1\51\13\21"+
    "\1\60\11\21\17\0\2\51\1\0\5\21\1\0\1\51"+
    "\3\21\1\60\21\21\17\0\2\51\1\0\5\21\1\0"+
    "\1\51\12\21\1\113\12\21\1\0\11\76\1\125\3\76"+
    "\1\5\40\76\16\0\2\142\1\0\5\142\1\0\26\142"+
    "\17\0\2\51\1\0\5\21\1\0\1\51\24\21\1\60"+
    "\17\0\2\51\1\0\5\21\1\0\1\51\11\21\1\60"+
    "\13\21\17\0\2\51\1\0\5\21\1\0\1\51\17\21"+
    "\1\60\5\21\17\0\2\51\1\0\5\21\1\0\1\51"+
    "\10\21\1\143\14\21\17\0\2\127\1\0\5\127\1\0"+
    "\14\127\1\144\11\127\17\0\2\127\1\0\5\127\1\0"+
    "\21\127\1\145\4\127\17\0\2\51\1\0\5\21\1\0"+
    "\1\51\20\21\1\60\4\21\17\0\2\51\1\0\5\21"+
    "\1\0\1\51\16\21\1\122\6\21\17\0\2\51\1\0"+
    "\5\21\1\0\1\51\10\21\1\146\14\21\17\0\2\51"+
    "\1\0\5\21\1\0\1\51\13\21\1\147\11\21\17\0"+
    "\2\150\1\0\5\150\1\0\26\150\17\0\2\51\1\0"+
    "\5\21\1\0\1\51\13\21\1\151\11\21\17\0\2\142"+
    "\1\0\5\142\1\0\21\142\1\152\4\142\17\0\2\142"+
    "\1\0\5\142\1\0\17\142\1\153\6\142\17\0\2\51"+
    "\1\0\5\21\1\0\1\51\2\21\1\60\22\21\17\0"+
    "\2\51\1\0\5\21\1\0\1\51\6\21\1\60\16\21"+
    "\17\0\2\154\1\0\5\154\1\0\26\154\17\0\2\51"+
    "\1\0\5\21\1\0\1\51\21\21\1\113\3\21\17\0"+
    "\2\150\1\0\5\150\1\0\11\150\1\155\14\150\17\0"+
    "\2\156\1\0\5\156\1\0\26\156\17\0\2\154\1\0"+
    "\5\154\1\0\14\154\1\157\11\154\17\0\2\160\1\0"+
    "\5\160\1\0\26\160\17\0\2\156\1\0\5\156\1\0"+
    "\7\156\1\161\16\156\17\0\2\162\1\0\5\162\1\0"+
    "\26\162\17\0\2\163\1\0\5\163\1\0\26\163\17\0"+
    "\2\164\1\0\5\164\1\0\26\164\17\0\2\165\1\0"+
    "\5\165\1\0\26\165\17\0\2\166\1\0\5\166\1\0"+
    "\26\166\17\0\2\167\1\0\5\167\1\0\26\167\17\0"+
    "\2\170\1\0\5\170\1\0\26\170\17\0\2\171\1\0"+
    "\5\171\1\0\26\171\17\0\2\172\1\0\5\172\1\0"+
    "\26\172\17\0\2\173\1\0\5\173\1\0\26\173\17\0"+
    "\2\174\1\0\5\174\1\0\26\174\17\0\2\175\1\0"+
    "\5\175\1\0\26\175\17\0\2\176\1\0\5\176\1\0"+
    "\26\176\17\0\2\177\1\0\5\177\1\0\26\177\17\0"+
    "\2\200\1\0\5\200\1\0\26\200\17\0\2\201\1\0"+
    "\5\201\1\0\26\201\17\0\2\202\1\0\5\202\1\0"+
    "\26\202\17\0\2\203\1\0\5\203\1\0\26\203\17\0"+
    "\2\204\1\0\5\204\1\0\26\204\17\0\2\205\1\0"+
    "\5\205\1\0\26\205\17\0\2\206\1\0\5\206\1\0"+
    "\26\206\17\0\2\207\1\0\5\207\1\0\26\207\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5658];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\2\11\27\1\1\11\1\1\1\11"+
    "\1\0\2\1\1\0\25\1\1\11\2\0\2\1\1\0"+
    "\1\11\21\1\1\0\61\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();
  String s_char = new String();

  private Symbol symbol(SymbolType type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(SymbolType type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Symbol nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Illegal character <" + yytext()+"> at line : "+yyline + " & col :" + yycolumn );
            }
            // fall through
          case 15: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 16: break;
          case 3:
            { return symbol(SymbolType.OPERATOR,yytext());
            }
            // fall through
          case 17: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 18: break;
          case 5:
            { return symbol(SymbolType.DECIMAL_INTEGER,yytext());
            }
            // fall through
          case 19: break;
          case 6:
            { return symbol(SymbolType.IDENTIFIER,yytext());
            }
            // fall through
          case 20: break;
          case 7:
            { string.append( yytext() );
            }
            // fall through
          case 21: break;
          case 8:
            { yybegin(YYINITIAL);
    return symbol(SymbolType.STRING_LITERAL,string.toString());
            }
            // fall through
          case 22: break;
          case 9:
            { string.setLength(0);
    string.append(yytext());
    if(string.toString().equals("\"")){
      yybegin(YYINITIAL);
    }else{
      yybegin(STRING);
    }
    return symbol(SymbolType.SPECIAL_CHARACTER,s_char);
            }
            // fall through
          case 23: break;
          case 10:
            { return symbol(SymbolType.REAL_NUMBER,yytext());
            }
            // fall through
          case 24: break;
          case 11:
            { return symbol(SymbolType.HEXADECIMAL_INTEGER,yytext());
            }
            // fall through
          case 25: break;
          case 12:
            { return symbol(SymbolType.KEYWORD,yytext());
            }
            // fall through
          case 26: break;
          case 13:
            { yybegin(SPECIAL_CHARACTERS);
    s_char = new String(yytext());
    return symbol(SymbolType.STRING_LITERAL,string.toString());
            }
            // fall through
          case 27: break;
          case 14:
            { return symbol(SymbolType.SCIENTIFIC,yytext());
            }
            // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
